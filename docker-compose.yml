version: '3.8'

services:
  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-development}
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - REACT_APP_API_URL=http://backend:4000
      - REACT_APP_GAME_SERVER_URL=ws://game-server:8080
    depends_on:
      - backend
      - game-server
    networks:
      - build-to-earn-network

  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - FIREBASE_CONFIG_BASE64=${FIREBASE_CONFIG_BASE64}
    depends_on:
      - mongodb
      - redis
    networks:
      - build-to-earn-network

  # Game Server Service
  game-server:
    build:
      context: ./game-server
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
      - "8081:8081"
    volumes:
      - ./game-server:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - GAME_SERVER_PORT=8080
      - WEBSOCKET_PORT=8081
      - GAME_SERVER_SECRET=${GAME_SERVER_SECRET}
    depends_on:
      - backend
      - redis
    networks:
      - build-to-earn-network

  # MongoDB Service
  mongodb:
    image: mongo:6.0
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-password}
      - MONGO_INITDB_DATABASE=build-to-earn
    networks:
      - build-to-earn-network

  # Redis Service
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - build-to-earn-network

  # Season Management Service
  season-management:
    build:
      context: ./season-management
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    volumes:
      - ./season-management:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - MONGODB_URI=${MONGODB_URI}
    depends_on:
      - mongodb
      - backend
    networks:
      - build-to-earn-network

  # Security System Service
  security-system:
    build:
      context: ./security-system
      dockerfile: Dockerfile
    ports:
      - "6000:6000"
    volumes:
      - ./security-system:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URL=${REDIS_URL}
      - ANTI_BOT_THRESHOLD=${ANTI_BOT_THRESHOLD}
    depends_on:
      - mongodb
      - redis
    networks:
      - build-to-earn-network

  # Analytics System Service
  analytics-system:
    build:
      context: ./analytics-system
      dockerfile: Dockerfile
    ports:
      - "7000:7000"
    volumes:
      - ./analytics-system:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - MONGODB_URI=${MONGODB_URI}
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL:-http://elasticsearch:9200}
    depends_on:
      - mongodb
      - elasticsearch
    networks:
      - build-to-earn-network

  # Elasticsearch for Analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - build-to-earn-network

  # Kibana for Analytics Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - build-to-earn-network

  # IPFS Node
  ipfs:
    image: ipfs/go-ipfs:latest
    ports:
      - "4001:4001"
      - "5001:5001"
      - "8080:8080"
    volumes:
      - ipfs-data:/data/ipfs
    networks:
      - build-to-earn-network

  # Blockchain Local Node (Ganache)
  ganache:
    image: trufflesuite/ganache-cli:latest
    ports:
      - "8545:8545"
    command: ganache-cli --deterministic --accounts 10 --host 0.0.0.0 --port 8545
    networks:
      - build-to-earn-network

  # Smart Contract Deployment Service
  smart-contracts:
    build:
      context: ./smart-contracts
      dockerfile: Dockerfile
    volumes:
      - ./smart-contracts:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - BLOCKCHAIN_RPC_URL=${BLOCKCHAIN_RPC_URL}
      - PRIVATE_KEY=${PRIVATE_KEY}
    depends_on:
      - ganache
    networks:
      - build-to-earn-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
      - game-server
    networks:
      - build-to-earn-network

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - build-to-earn-network

  # Grafana for Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - build-to-earn-network

networks:
  build-to-earn-network:
    driver: bridge

volumes:
  mongodb-data:
  redis-data:
  elasticsearch-data:
  ipfs-data:
  prometheus-data:
  grafana-data:
